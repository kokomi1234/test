version: '3.8'

networks:
  app-net:
    driver: bridge

volumes:
  mysql-data:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  redis-data-4:
  redis-data-5:
  redis-data-6:

services:
  # Zookeeper 服务
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - app-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka 服务
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    networks:
      - app-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # MySQL 服务
  mysql_db:
    image: mysql:8.0
    container_name: mysql_order_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 'rootpassword'
      MYSQL_DATABASE: 'order_system'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - app-net

  # Redis 集群节点
  redis-node-1:
    image: redis:7
    container_name: redis-node-1
    ports:
      - "7001:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-1:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  redis-node-2:
    image: redis:7
    container_name: redis-node-2
    ports:
      - "7002:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-2:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  redis-node-3:
    image: redis:7
    container_name: redis-node-3
    ports:
      - "7003:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-3:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  redis-node-4:
    image: redis:7
    container_name: redis-node-4
    ports:
      - "7004:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-4:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  redis-node-5:
    image: redis:7
    container_name: redis-node-5
    ports:
      - "7005:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-5:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  redis-node-6:
    image: redis:7
    container_name: redis-node-6
    ports:
      - "7006:6379"
    command: >
      redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis-data-6:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - app-net

  # Redis 集群创建器
  redis-cluster-creator:
    image: redis:7
    container_name: redis-cluster-creator
    depends_on:
      redis-node-1: { condition: service_healthy }
      redis-node-2: { condition: service_healthy }
      redis-node-3: { condition: service_healthy }
      redis-node-4: { condition: service_healthy }
      redis-node-5: { condition: service_healthy }
      redis-node-6: { condition: service_healthy }
    command: >
      sh -c "
        echo '>>> Waiting for nodes to be ready...' && sleep 5 &&
        redis-cli --cluster create 
        redis-node-1:6379 
        redis-node-2:6379 
        redis-node-3:6379 
        redis-node-4:6379 
        redis-node-5:6379 
        redis-node-6:6379 
        --cluster-replicas 1 
        --cluster-yes
      "
    networks:
      - app-net